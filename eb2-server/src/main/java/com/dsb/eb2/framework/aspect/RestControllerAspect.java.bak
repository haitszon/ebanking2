package com.dsb.eb2.framework.aspect;

import java.util.Arrays;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

@Aspect
@Component
public class RestControllerAspect {

	private final Log logger = LogFactory.getLog(this.getClass());

	ThreadLocal<Long> startTime = new ThreadLocal<>();

	// @Pointcut("execution(public * com.dsb.eb2.api.rest.*Controller.*(..))")
	@Pointcut("within(com.dsb.eb2..*)")
	public void executeBase() {
		logger.info("[RestControllerAspect] pointcut advise");
	}

	@Before("executeBase()")
	public void doBefore(JoinPoint joinPoint) throws Throwable {
		logger.info("[RestControllerAspect] before advise");
		startTime.set(System.currentTimeMillis());

		ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
		if (attributes != null) {
			HttpServletRequest request = attributes.getRequest();

			logger.info("URL : " + request.getRequestURL().toString());
			logger.info("HTTP_METHOD : " + request.getMethod());
			logger.info("IP : " + request.getRemoteAddr());
			logger.info("CLASS_METHOD : " + joinPoint.getSignature().getDeclaringTypeName() + "."
					+ joinPoint.getSignature().getName());
			logger.info("ARGS : " + Arrays.toString(joinPoint.getArgs()));

			logger.info("[RestControllerAspect] ==================================================== ");
		}
	}

	@Around("@annotation(BaseExecution)")
	public Object around(ProceedingJoinPoint pjp) throws Throwable {
		logger.info("[RestControllerAspect] around");
		
		final Object proceed = pjp.proceed();

		logger.info("proceed = " + proceed);
		
		return proceed;
	}

	@After("executeBase()")
	public void after(JoinPoint joinPoint) {
		logger.info("[RestControllerAspect] after advise");
	}

	@AfterReturning(returning = "ret", pointcut = "executeBase()")
	public void doAfterReturning(Object ret) throws Throwable {
		logger.info("[RestControllerAspect] afterReturning advise");
		logger.info("RESPONSE : " + ret);
		logger.info("SPEND TIME : " + (System.currentTimeMillis() - startTime.get()));
	}

	@AfterThrowing(pointcut = "executeBase()")
	public void afterThrowing(JoinPoint joinPoint) {
		logger.info("[RestControllerAspect] afterThrowing advise");
	}

}
