import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { first, catchError } from 'rxjs/operators';
import { AuthenticationService } from '../_services';

@Injectable()
export class ErrorInterceptor implements HttpInterceptor {

    constructor(private authenticationService: AuthenticationService) {}

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        return next.handle(request).pipe(catchError(err => {
            if (err.status === 401 && err.error.message == "JwtExpiredTokenException") {
                console.log("ErrorIntercepter ::::::::::::::::::::::::::::::::: JwtExpiredTokenException");
                // refresh the token
                // this.authenticationService.refreshToken()
                //     .pipe(first())
                //     .subscribe(
                //         data => {
                //             console.log("refresh completed "+ data);
                //         },
                //         error => {
                //             console.log("refresh failed "+ error);
                //         });

            } else if (err.status === 401) {
                // auto logout if 401 response returned from api
                console.log("ErrorIntercepter ::::::::::::::::::::::::::::::::");
                this.authenticationService.logout();
                location.reload(true);
            }
            
            const error = err.error.message || err.statusText;
            return throwError(error);
        }))
    }
}